# Manage generation/validation of URLs generated by present app and linking to itself
from config_rdr import config

SCAN_JPEG = "scan.jpg"


def get_download_url(file_id: str) -> str:
    """
    Generate a download URL for a file.

    Args:
        file_id (str): The ID of the file to download

    Returns:
        str: The full URL to download the file
    """
    return f"{config.PUBLIC_URL}/download/{file_id}"


def is_download_url(url: str) -> bool:
    """
    Check if a URL is a download URL.

    Args:
        url (str): The URL to check

    Returns:
        bool: True if the URL is a download URL, False otherwise
    """
    return url.startswith(f"{config.PUBLIC_URL}/download/")


def extract_file_id_from_download_url(url: str) -> str:
    """
    Extract the file ID from a download URL.

    Args:
        url (str): The download URL

    Returns:
        str: The file ID extracted from the URL
    """
    if not is_download_url(url):
        raise ValueError(f"Not a download URL: {url}")

    return url.replace(f"{config.PUBLIC_URL}/download/", "")


def generate_scan_url(project_hash: str, sample_hash: str, subsample_hash: str) -> str:
    """
    Generate a URL for a scan.

    Args:
        project_hash (str): The project hash
        sample_hash (str): The sample hash
        subsample_hash (str): The subsample hash

    Returns:
        str: The full URL to the scan
    """
    return f"{config.PUBLIC_URL}/projects/{project_hash}/samples/{sample_hash}/subsamples/{subsample_hash}/{SCAN_JPEG}"


def generate_background_url(project_hash: str, background_date: str) -> str:
    """
    Generate a URL for a background image.

    Args:
        project_hash (str): The project hash
        background_date (str): The background date

    Returns:
        str: The full URL to the background image
    """
    return (
        f"{config.PUBLIC_URL}/projects/{project_hash}/background/{background_date}.jpg"
    )


def generate_work_image_url(
    project_hash: str,
    sample_hash: str,
    subsample_hash: str,
    image_name: str,
    modern: bool = False,
) -> str:
    """
    Generate a URL for a work image.

    Args:
        project_hash (str): The project hash
        sample_hash (str): The sample hash
        subsample_hash (str): The subsample hash
        image_name (str): The image name e.g. pero2023_tha_bioness_013_st46_d_n4_d2_1_sur_2_1_vis1.zip
        modern (bool): The image is in v10 subdir

    Returns:
        str: The full URL to the image
    """
    subdir = "v10/" if modern else ""
    return f"{config.PUBLIC_URL}/projects/{project_hash}/samples/{sample_hash}/subsamples/{subsample_hash}/{subdir}{image_name}"
