# generated by datamodel-codegen:
#   filename:  tmpocg7c1b1.json
#   timestamp: 2025-06-27T15:12:47+00:00


from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, constr


class AccessLevelEnum(Enum):
    field_1 = "1"
    field_2 = "2"
    field_0 = "0"


class AcquisitionModel(BaseModel):
    acquisid: int = Field(
        ..., description="The acquisition Id.", examples=[144], title="Acquisition Id"
    )
    acq_sample_id: int = Field(
        ...,
        description="The acquisition sample Id.",
        examples=[1039],
        title="Acquisition sample Id",
    )
    orig_id: str = Field(
        ...,
        description="Original acquisition ID from initial TSV load.",
        examples=["uvp5_station1_cast1b"],
        title="Original id",
    )
    instrument: Optional[str] = Field(
        None, description="Instrument used.", examples=["uvp5"], title="Instrument"
    )
    free_columns: Optional[Dict[str, Any]] = Field(
        {},
        description="Free columns from acquisition mapping in project.",
        examples=[{"bottomdepth": 322, "ship": "suroit"}],
        title="Free columns",
    )


class BackupExportReq(BaseModel):
    collection_id: Optional[int] = Field(
        None,
        description="The Collection to export if requested.",
        examples=[1],
        title="Collection Id",
    )
    project_id: Union[int, str] = Field(
        ...,
        description="The project(int) or projects (str, project ids list) to export.",
        examples=[1],
        title="Project Id",
    )
    out_to_ftp: Optional[bool] = Field(
        False,
        description="Copy result file to FTP area. Original file is still available.",
        examples=[False],
        title="Out to ftp",
    )


class BodyCreateFileUserFilesCreatePost(BaseModel):
    source_path: Optional[str] = Field(
        None,
        description="The client-side full path of the file or directory to be moved.",
        title="Source Path",
    )


class BodyMoveFileUserFilesMvPost(BaseModel):
    source_path: Optional[str] = Field(
        None,
        description="The client-side full path of the file or directory to be moved.",
        title="Source Path",
    )
    dest_path: Optional[str] = Field(
        None,
        description="The client-side full path of the destination file or directory.",
        title="Destination Path",
    )


class BodyPutMyFileUserFilesPost(BaseModel):
    file: bytes = Field(..., title="File")
    path: Optional[str] = Field(
        None, description="The client-side full path of the file.", title="Path"
    )


class BodyPutUserFileMyFilesPost(BaseModel):
    file: bytes = Field(..., title="File")
    path: Optional[str] = Field(
        None, description="The client-side full path of the file.", title="Path"
    )
    tag: Optional[str] = Field(
        None,
        description="If a tag is provided, then all files with the same tag are grouped (in a sub-directory). Otherwise, a temp directory with only this file will be created.",
        title="Tag",
    )


class BodyRemoveFileUserFilesRmPost(BaseModel):
    source_path: Optional[str] = Field(
        None,
        description="The client-side full path of the file  or directory to be removed.",
        title="Source Path",
    )


class ClassifyAutoReq(BaseModel):
    target_ids: List[int] = Field(
        ..., description="The IDs of the target objects.", title="Target Ids"
    )
    classifications: List[int] = Field(
        ...,
        description="The wanted new classifications, i.e. taxon ID, one for each object.",
        title="Classifications",
    )
    scores: List[float] = Field(
        ...,
        description="The classification score is generally between 0 and 1. It indicates the probability that the taxon prediction of this object is correct.",
        title="Scores",
    )
    keep_log: bool = Field(
        ...,
        description="Set if former automatic classification history is needed.",
        title="Keep log",
    )


class ClassifyAutoReqMult(BaseModel):
    target_ids: List[int] = Field(
        ..., description="The IDs of the target objects.", title="Target Ids"
    )
    classifications: List[List[int]] = Field(
        ...,
        description="The wanted new classifications, i.e. taxon ID, one list for each object.",
        title="Classifications",
    )
    scores: List[List[float]] = Field(
        ...,
        description="The classification scores, between 0 and 1. Each indicates the probability that the taxon prediction of this object for this category is correct.",
        title="Scores",
    )
    keep_log: bool = Field(
        ...,
        description="Set if former automatic classification history is needed. Deprecated, always True.",
        title="Keep log",
    )


class ClassifyReq(BaseModel):
    target_ids: List[int] = Field(
        ...,
        description="The IDs of the target objects.",
        examples=[[634509, 6234516, 976544]],
        title="Target Ids",
    )
    classifications: List[int] = Field(
        ...,
        description="The wanted new classifications, i.e. taxon ID, one for each object. Use -1 to keep present one.",
        examples=[[7546, 3421, 788]],
        title="Classifications",
    )
    wanted_qualification: str = Field(
        ...,
        description="The wanted qualifications for all objects. 'V' or 'P'.",
        examples=["V"],
        title="Wanted qualification",
    )


class ColUpdate(BaseModel):
    ucol: str = Field(..., title="Ucol")
    uval: str = Field(..., title="Uval")


class Constants(BaseModel):
    license_texts: Optional[Dict[str, str]] = Field(
        {
            "CC0 1.0": '<a href="https://creativecommons.org/publicdomain/zero/1.0/" rel="nofollow"><strong>CC-0</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, with no conditions. Other databases can index the data. The data falls into the worldwide public domain. This is the license preferred by <a href="https://obis.org/manual/policy/" rel="nofollow">OBIS</a> and <a href="https://www.gbif.org/terms" rel="nofollow">GBIF</a>.',
            "CC BY 4.0": '<a href="https://creativecommons.org/licenses/by/4.0/" rel="nofollow"><strong>CC-BY</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, as long as they cite the dataset and its authors. Other databases can index the data.',
            "CC BY-NC 4.0": '<a href="https://creativecommons.org/licenses/by-nc/4.0/" rel="nofollow"><strong>CC-BY-NC</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, as long as they cite the dataset and its authors, and do not use it for commercial purpose ("primarily intended for or directed toward commercial advantage or monetary compensation"). Other databases can index the data.',
            "Copyright": "<strong>Copyright</strong>: only contributors to this project have rights on this data. This prevents its distribution in any kind of database.",
            "": "Not chosen",
        },
        description="The supported licenses and help text/links.",
        examples=[
            {
                "CC0 1.0": '<a href="https://creativecommons.org/publicdomain/zero/1.0/" rel="nofollow"><strong>CC-0</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, with no conditions. Other databases can index the data. The data falls into the worldwide public domain. This is the license preferred by <a href="https://obis.org/manual/policy/" rel="nofollow">OBIS</a> and <a href="https://www.gbif.org/terms" rel="nofollow">GBIF</a>.',
                "CC BY 4.0": '<a href="https://creativecommons.org/licenses/by/4.0/" rel="nofollow"><strong>CC-BY</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, as long as they cite the dataset and its authors. Other databases can index the data.',
                "CC BY-NC 4.0": '<a href="https://creativecommons.org/licenses/by-nc/4.0/" rel="nofollow"><strong>CC-BY-NC</strong></a>: all registered EcoTaxa users are free to download, redistribute, modify, and build upon the data, as long as they cite the dataset and its authors, and do not use it for commercial purpose ("primarily intended for or directed toward commercial advantage or monetary compensation"). Other databases can index the data.',
                "Copyright": "<strong>Copyright</strong>: only contributors to this project have rights on this data. This prevents its distribution in any kind of database.",
                "": "Not chosen",
            }
        ],
        title="License texts",
    )
    access: Optional[Dict[str, str]] = Field(
        {"PUBLIC": "1", "OPEN": "2", "PRIVATE": "0"},
        description="Project access levels.",
        examples=[{"PUBLIC": "", "OPEN": "O", "PRIVATE": "P"}],
        title="Project access",
    )
    app_manager: Optional[List[str]] = Field(
        ["", ""],
        description="The application manager identity (name, mail), from config file.",
        examples=[["App manager Name", "app.manager@email.fr"]],
        max_length=2,
        min_length=2,
        title="Application manager",
    )
    countries: Optional[List[str]] = Field(
        [],
        description="List of known countries names.",
        examples=[["France"]],
        min_length=1,
        title="Countries",
    )
    people_organization_directories: Optional[Dict[str, str]] = Field(
        {"orcid": "https://orcid.org/", "edmo": "https://edmo.seadatanet.org/"},
        description="Available directories to identify people and organizations in collections settings",
        examples=[
            {"https://edmo.seadatanet.org/": "edmo", "https://orcid.org/": "orcid"}
        ],
        title="People and organizations directories",
    )
    user_status: Optional[Dict[str, int]] = Field(
        {"blocked": -1, "inactive": 0, "active": 1, "pending": 2},
        description="Application User status values",
        examples=[{"blocked": -1, "inactive": 0, "active": 1, "pending": 2}],
        title="User status",
    )
    user_type: Optional[Dict[str, str]] = Field(
        {"guest": "guest", "user": "user"},
        description="Application User type values",
        examples=[{"guest": "guest"}],
        title="User status",
    )
    password_regexp: Optional[str] = Field(
        "^(?:(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#?%^&*-+])).{8,20}$",
        description="8 char. minimum, at least one uppercase, one lowercase, one number and one special char in '#?!@%^&*-+' ",
        title="Password regexp",
    )
    email_verification: Optional[bool] = Field(
        True,
        description="Require verification before activation.",
        title="Account email verification",
    )
    account_validation: Optional[bool] = Field(
        False,
        description="Require validation by a Users Administrator before activation.",
        title="Account validation",
    )
    short_token_age: Optional[int] = Field(
        1,
        description="Email confirmation, password reset token lifespan.",
        title="Short token lifespan",
    )
    profile_token_age: Optional[int] = Field(
        24,
        description="Profile modification token lifespan.",
        title="Profile token lifespan",
    )
    recaptchaid: Optional[bool] = Field(
        False, description="use Google ReCaptcha", title="Google ReCaptcha"
    )
    formulae: Optional[str] = Field(
        "subsample_coef: 1/ssm.sub_part\ntotal_water_volume: sam.tot_vol/1000\nindividual_volume: 4.0/3.0*math.pi*(math.sqrt(obj.area/math.pi)*ssm.pixel_size)**3",
        description="Project default concentration formulae",
        title="Project Formulae",
    )


class CreateCollectionReq(BaseModel):
    title: str = Field(
        ...,
        description="The collection title.",
        examples=["My collection"],
        title="Title",
    )
    project_ids: List[int] = Field(
        ...,
        description="The list of composing project IDs.",
        examples=[[1]],
        min_length=1,
        title="Project ids",
    )


class CreateProjectReq(BaseModel):
    clone_of_id: Optional[int] = Field(
        None,
        description="Internal, numeric id of a project to clone as a new one. By default it does not clone anything.",
        examples=[2],
        title="Clone of id",
    )
    title: str = Field(
        ...,
        description="The project title, as text.",
        examples=["My new project title"],
        title="Title",
    )
    instrument: Optional[str] = Field(
        "?",
        description="The project instrument.",
        examples=["UVP5"],
        title="Instrument",
    )
    access: Optional[AccessLevelEnum] = Field(
        "1",
        description='When "1" (PUBLIC), the project is created visible by all users.PUBLIC: "1", OPEN: "2", PRIVATE: "0"',
        examples=["1"],
        title="Access",
    )


class DirectoryEntryModel(BaseModel):
    name: str = Field(
        ...,
        description="atomic entry name.",
        examples=["task_281167_export_reduced_20200120_15_05.zip"],
        title="Name",
    )
    type: str = Field(
        ...,
        description="entry type, 'D' for directory, 'F' for file.",
        examples=["F"],
        title="Type",
    )
    size: int = Field(
        ..., description="Entry size, for zips.", examples=[173804090], title="Size"
    )
    mtime: str = Field(
        ...,
        description="Modification time, in ISO format.",
        examples=["2020-01-20 15:10:54.834571"],
        title="Modification time",
    )


class DirectoryModel(BaseModel):
    path: str = Field(
        ...,
        description="A /-separated path from root to this directory.",
        examples=["/ftp_plankton/Ecotaxa_Exported_data"],
        title="Path",
    )
    entries: List[DirectoryEntryModel] = Field(
        ...,
        description="Entries, i.e. subdirectories or contained files.All entries are readable, i.e. can be used as input or navigated into.",
        title="Entries",
    )


class ExportImagesOptionsEnum(Enum):
    all = "all"
    first = "first"
    none = "none"


class ExportRsp(BaseModel):
    errors: Optional[List[str]] = Field(
        [],
        description="Showstopper problems found preventing building the archive.",
        examples=[
            [
                "No content produced.",
                " See previous warnings or check the presence of samples in the projects",
            ]
        ],
        title="Errors",
    )
    warnings: Optional[List[str]] = Field(
        [],
        description="Problems found while building the archive, which do not prevent producing it.",
        examples=[["No occurrence added for sample '3456' in 1"]],
        title="Warnings",
    )
    job_id: Optional[int] = Field(
        0,
        description="The created job, 0 if there were problems.",
        examples=[12376],
        title="Job Id",
    )


class ExportSplitOptionsEnum(Enum):
    sample = "sample"
    acquisition = "acquisition"
    taxon = "taxon"
    none = "none"


class ExportTypeEnum(Enum):
    TSV = "TSV"
    BAK = "BAK"
    DOI = "DOI"
    SUM = "SUM"
    ABO = "ABO"
    CNC = "CNC"
    BIV = "BIV"


class GeneralExportReq(BaseModel):
    collection_id: Optional[int] = Field(
        None,
        description="The Collection to export if requested.",
        examples=[1],
        title="Collection Id",
    )
    project_id: Union[int, str] = Field(
        ...,
        description="The project(int) or projects (str, project ids list) to export.",
        examples=[1],
        title="Project Id",
    )
    split_by: Optional[ExportSplitOptionsEnum] = Field(
        "none",
        description="If not none, separate (in ZIP sub-directories) output per given field.",
        examples=["sample"],
        title="Split by",
    )
    with_images: Optional[ExportImagesOptionsEnum] = Field(
        "none",
        description="Add in ZIP first (i.e. visible) image, all images, or no image.⚠️ 'all' means maybe several lines per object in TSVs.",
        examples=["first"],
        title="With images",
    )
    with_internal_ids: Optional[bool] = Field(
        False,
        description="Export internal database IDs.",
        examples=[False],
        title="With internal ids",
    )
    with_types_row: Optional[bool] = Field(
        False,
        description="Add an EcoTaxa-compatible second line with types.",
        examples=[False],
        title="With types row",
    )
    only_annotations: Optional[bool] = Field(
        False,
        description="Only save objects' last annotation data.",
        examples=[False],
        title="Backup annotations",
    )
    out_to_ftp: Optional[bool] = Field(
        False,
        description="Copy result file to FTP area. Original file is still available.",
        examples=[False],
        title="Out to ftp",
    )


class GroupDefinitions(Enum):
    C = "C"
    S = "S"
    A = "A"


class GuestModel(BaseModel):
    id: int = Field(
        ..., description="The unique numeric id of this user.", examples=[1], title="Id"
    )
    email: str = Field(
        ...,
        description="User's email address, as text, used during registration.",
        examples=["ecotaxa.api.user@gmail.com"],
        title="Email",
    )
    name: str = Field(
        ...,
        description="User's full name, as text.",
        examples=["userName"],
        title="Name",
    )
    country: Optional[str] = Field(
        None,
        description="The country name, as text (but chosen in a consistent list).",
        examples=["France"],
        title="Country",
    )
    orcid: Optional[str] = Field(
        None,
        description="The orcid id https://support.orcid.org.",
        examples=["0000-0001-2345-6789"],
        title="ORCID ID",
    )
    organisation: str = Field(
        ...,
        description="User's organisation name, as text.",
        examples=["Oceanographic Laboratory of Villefranche sur Mer - LOV"],
        title="Organisation",
    )


class HistoricalClassification(BaseModel):
    objid: Optional[int] = Field(
        None, description="The object Id.", examples=[264409236], title="Object Id"
    )
    classif_id: Optional[int] = Field(
        None,
        description="The classification Id.",
        examples=[82399],
        title="Classification Id",
    )
    classif_date: Optional[datetime] = Field(
        None,
        description="The classification date.",
        examples=["2021-09-21T14:59:01.007110"],
        title="Classification date",
    )
    classif_who: Optional[int] = Field(
        None,
        description="The user who manualy classify this object.",
        examples=["null"],
        title="Classification who",
    )
    classif_type: Optional[str] = Field(
        None,
        description="The type of classification. Could be **A** for Automatic or **M** for Manual.",
        examples=["A"],
        title="Classification type",
    )
    classif_qual: Optional[str] = Field(
        None,
        description="The classification qualification. Could be **P** for predicted, **V** for validated or **D** for Dubious.",
        examples=["P"],
        title="Classification qualification",
    )
    classif_score: Optional[float] = Field(
        None,
        description="The classification score is generally between 0 and 1. This is a confidence score, in the fact that, the taxon prediction for this object is correct.",
        examples=[0.085],
        title="Classification score",
    )
    user_name: Optional[str] = Field(
        None,
        description="The name of the user who classified this object.",
        examples=["null"],
        title="User name",
    )
    taxon_name: Optional[str] = Field(
        None,
        description="The taxon name of the object.",
        examples=["Penilia avirostris"],
        title="Taxon name",
    )


class HistoricalLastClassif(BaseModel):
    objid: Optional[int] = Field(
        None, description="The object Id.", examples=[264409236], title="Object Id"
    )
    classif_id: Optional[int] = Field(
        None,
        description="The classification Id.",
        examples=[82399],
        title="Classification Id",
    )
    histo_classif_date: Optional[datetime] = Field(
        None,
        description="The classification date.",
        examples=["2021-09-21T14:59:01.007110"],
        title="Historical last classification date",
    )
    histo_classif_id: Optional[int] = Field(
        None,
        description="The classification Id.",
        examples=[56],
        title="Historical last classification Id",
    )
    histo_classif_type: Optional[str] = Field(
        None,
        description="The type of classification. Could be **A** for Automatic or **M** for Manual.",
        examples=["M"],
        title="Historical last classification type",
    )
    histo_classif_qual: Optional[str] = Field(
        None,
        description="The classification qualification. Could be **P** for predicted, **V** for validated or **D** for Dubious.",
        examples=["V"],
        title="Historical last classification qualification",
    )
    histo_classif_who: Optional[int] = Field(
        None,
        description="The user who manually classified this object.",
        examples=[3876],
        title="Historical last classification who",
    )
    histo_classif_score: Optional[float] = Field(None, title="Histo Classif Score")


class ImageModel(BaseModel):
    imgid: int = Field(
        ..., description="The id of the image.", examples=[376456], title="Image Id"
    )
    objid: int = Field(
        ...,
        description="The id of the object related to the image.",
        examples=[376456],
        title="Object Id",
    )
    imgrank: int = Field(
        ..., description="The rank of the image.", examples=[0], title="Image rank"
    )
    width: int = Field(
        ..., description="The width of the image.", examples=[98], title="Width"
    )
    height: int = Field(
        ..., description="The height of the image.", examples=[63], title="Height"
    )
    orig_file_name: str = Field(
        ...,
        description="The file name of the original image.",
        examples=["dewex_leg2_63_689.jpg"],
        title="Original file name",
    )
    thumb_width: Optional[int] = Field(
        None,
        description="Generate thumbnail if image is too large. This generated thumbnail width.",
        examples=["null"],
        title="Thumb width",
    )
    thumb_height: Optional[int] = Field(
        None,
        description="Generate thumbnail if image is too large. The thumb height of the image.",
        examples=["null"],
        title="Thumb height",
    )
    file_name: str = Field(
        ..., description="The file name.", examples=["0037/6456.jpg"], title="File name"
    )
    thumb_file_name: Optional[str] = Field(
        None,
        description="If image was too large at import time, the generated thumbnail file name.",
        examples=["null"],
        title="Thumb file name",
    )


class ImportReq(BaseModel):
    source_path: str = Field(
        ...,
        description="Source path on server, to zip or plain directory. \n \n The path can be returned by a file upload (absolute), \n \n otherwise it's relative to shared file area root.",
        examples=["/import_test.zip"],
        title="Source path",
    )
    taxo_mappings: Optional[Dict[str, str]] = Field(
        {},
        description="Optional taxonomy mapping, the key specifies the taxonomy ID found in file and the value specifies the final taxonomy ID to write.",
        examples=[{"23444": 76543}],
        title="Taxo mappings",
    )
    skip_loaded_files: Optional[bool] = Field(
        False,
        description="If true skip loaded files, else don't.",
        examples=[False],
        title="Skip loaded files",
    )
    skip_existing_objects: Optional[bool] = Field(
        False,
        description="If true skip existing objects, else don't.",
        examples=[False],
        title="Skip existing objects",
    )
    update_mode: Optional[str] = Field(
        "",
        description="Update data ('Yes'), including classification ('Cla').",
        examples=["Yes"],
        title="Update mode",
    )


class ImportRsp(BaseModel):
    job_id: int = Field(
        ...,
        description="The job which was created for the run.",
        examples=[1],
        title="Job Id",
    )
    errors: Optional[List[str]] = Field(
        [],
        description="Errors from analysis.",
        examples=[["new TSV file(s) are not compliant"]],
        title="Errors",
    )


class JobModel(BaseModel):
    params: Optional[Dict[str, Any]] = Field(
        {},
        description="Creation parameters.",
        examples=[
            {
                "prj_id": 1,
                "req": {
                    "filters": {"taxo": "85067", "taxochild": "N"},
                    "dest_prj_id": 1,
                    "group_type": "S",
                    "limit_type": "P",
                    "limit_value": 100.0,
                    "do_images": True,
                },
            }
        ],
        title="params",
    )
    result: Optional[Dict[str, Any]] = Field(
        {},
        description="Final result of the run.",
        examples=[{"rowcount": 3}],
        title="result",
    )
    errors: Optional[List[str]] = Field(
        [],
        description="The errors seen during last step.",
        examples=[[]],
        title="errors",
    )
    question: Optional[Dict[str, Any]] = Field(
        {},
        description="The data provoking job move to Asking state.",
        examples=[{}],
        title="question",
    )
    reply: Optional[Dict[str, Any]] = Field(
        {},
        description="The data provided as a reply to the question.",
        examples=[{}],
        title="reply",
    )
    inside: Optional[Dict[str, Any]] = Field(
        {}, description="Internal state of the job.", examples=[{}], title="inside"
    )
    id: int = Field(
        ..., description="Job unique identifier.", examples=[47445], title="id"
    )
    owner_id: int = Field(
        ...,
        description="The user who created and thus owns the job. ",
        examples=[1],
        title="owner_id",
    )
    type: str = Field(
        ...,
        description="The job type, e.g. import, export... ",
        examples=["Subset"],
        title="type",
    )
    state: Optional[str] = Field(
        None,
        description="What the job is doing. Could be 'P' for Pending (Waiting for an execution thread), 'R' for Running (Being executed inside a thread), 'A' for Asking (Needing user information before resuming), 'E' for Error (Stopped with error), 'F' for Finished (Done).",
        examples=["F"],
        title="state",
    )
    step: Optional[int] = Field(
        None,
        description="Where in the workflow the job is. ",
        examples=["null"],
        title="step",
    )
    progress_pct: Optional[int] = Field(
        None,
        description="The progress percentage for UI. ",
        examples=[100],
        title="progress_pct",
    )
    progress_msg: Optional[str] = Field(
        None,
        description="The message for UI, short version. ",
        examples=["Done"],
        title="progress_msg",
    )
    creation_date: datetime = Field(
        ...,
        description="The date of creation of the Job, as text formatted according to the ISO 8601 standard.",
        examples=["2021-09-28T08:43:20.196061"],
        title="creation_date",
    )
    updated_on: datetime = Field(
        ...,
        description="Last time that anything changed in present line. ",
        examples=["2021-09-28T08:43:21.441969"],
        title="updated_on",
    )


class LicenseEnum(Enum):
    CC0_1_0 = "CC0 1.0"
    CC_BY_4_0 = "CC BY 4.0"
    CC_BY_NC_4_0 = "CC BY-NC 4.0"
    Copyright = "Copyright"
    field_ = ""


class LimitMethods(Enum):
    P = "P"
    V = "V"


class LoginReq(BaseModel):
    password: str = Field(
        ..., description="User password.", examples=["test!"], title="User's password"
    )
    username: str = Field(
        ...,
        description="User email used during registration.",
        examples=["ecotaxa.api.user@gmail.com"],
        title="User's email",
    )


class MLModel(BaseModel):
    name: str = Field(
        ...,
        description="A usable model for features extraction.",
        examples=["zoocam_2022_04_06"],
        title="Name",
    )


class MergeRsp(BaseModel):
    errors: Optional[List[str]] = Field(
        [], description="The errors found during processing.", title="Errors"
    )


class MinUserModel(BaseModel):
    id: int = Field(
        ..., description="The unique numeric id of this user.", examples=[1], title="Id"
    )
    email: str = Field(
        ...,
        description="User's email address, as text, used during registration.",
        examples=["ecotaxa.api.user@gmail.com"],
        title="Email",
    )
    name: str = Field(
        ...,
        description="User's full name, as text.",
        examples=["userName"],
        title="Name",
    )
    organisation: str = Field(
        ...,
        description="User's organisation name, as text.",
        examples=["Oceanographic Laboratory of Villefranche sur Mer - LOV"],
        title="Organisation",
    )


class MinimalCollectionBO(BaseModel):
    id: int = Field(..., title="Id")
    external_id: Optional[str] = Field(None, title="External Id")
    title: str = Field(..., title="Title")
    short_title: Optional[str] = Field(None, title="Short Title")
    provider_user: int = Field(..., title="Provider User")
    contact_user: Optional[int] = Field(None, title="Contact User")
    project_ids: List[int] = Field(..., title="Project Ids")


class MinimalUserBO(BaseModel):
    id: Optional[int] = Field(None, title="Id")
    name: Optional[str] = Field(None, title="Name")


class ObjectHeaderModel(BaseModel):
    classif_when: Optional[datetime] = Field(
        None,
        description="The human classification date, if **P** or **V**.",
        examples=["2021-09-21T14:59:01.007110"],
        title="Classification when",
    )
    classif_auto_id: Optional[int] = Field(
        None,
        description="Set if the object was ever predicted, remains forever with these value. Reflect the 'last state' only if classif_qual is 'P'. ",
        title="Classification auto Id",
    )
    classif_auto_score: Optional[float] = Field(
        None,
        description="Set if the object was ever predicted, remains forever with these value. Reflect the 'last state' only if classif_qual is 'P'. The classification auto score is generally between 0 and 1. This is a confidence score, in the fact that, the taxon prediction for this object is correct.",
        examples=[0.085],
        title="Classification auto score",
    )
    classif_auto_when: Optional[datetime] = Field(
        None,
        description="Set if the object was ever predicted, remains forever with these value. Reflect the 'last state' only if classif_qual is 'P'. The classification date.",
        examples=["2021-09-21T14:59:01.007110"],
        title="Classification auto when",
    )
    objid: int = Field(
        ..., description="The object Id.", examples=[264409236], title="Object Id"
    )
    acquisid: int = Field(
        ...,
        description="The parent acquisition Id.",
        examples=[144],
        title="Acquisition Id",
    )
    classif_id: Optional[int] = Field(
        None,
        description="The classification Id.",
        examples=[82399],
        title="Classification Id",
    )
    objtime: Optional[datetime] = Field(None, title="Object time")
    latitude: Optional[float] = Field(
        None, description="The latitude.", examples=[42.0231666666667], title="Latitude"
    )
    longitude: Optional[float] = Field(
        None,
        description="The longitude.",
        examples=[4.71766666666667],
        title="Longitude",
    )
    depth_min: Optional[float] = Field(
        None, description="The min depth.", examples=[0], title="Depth min"
    )
    depth_max: Optional[float] = Field(
        None, description="The min depth.", examples=[300], title="Depth max"
    )
    objdate: Optional[date] = Field(None, title="Object date")
    classif_qual: Optional[str] = Field(
        None,
        description="The classification qualification. Could be **P** for predicted, **V** for validated or **D** for Dubious.",
        examples=["P"],
        title="Classification qualification",
    )
    sunpos: Optional[str] = Field(
        None,
        description="Sun position, from date, time and coords.",
        examples=["N"],
        title="Sun position",
    )
    classif_score: Optional[float] = Field(
        None,
        description="The ML score for this object, if **P**.",
        examples=["null"],
        title="Classification score",
    )
    classif_who: Optional[int] = Field(
        None,
        description="The user who manually classified this object, if **V** or **D**.",
        examples=["null"],
        title="Classification who",
    )
    orig_id: str = Field(
        ...,
        description="Original object ID from initial TSV load.",
        examples=["deex_leg1_48_406"],
        title="Original id",
    )
    object_link: Optional[str] = Field(
        None,
        description="Object link.",
        examples=["http://www.zooscan.obs-vlfr.fr//"],
        title="Object link",
    )
    complement_info: Optional[str] = Field(
        None, examples=["Part of ostracoda"], title="Complement info"
    )


class ObjectModel(BaseModel):
    classif_when: Optional[datetime] = Field(
        None,
        description="The human classification date, if **P** or **V**.",
        examples=["2021-09-21T14:59:01.007110"],
        title="Classification when",
    )
    classif_auto_id: Optional[int] = Field(
        None,
        description="Set if the object was ever predicted, remains forever with these value. Reflect the 'last state' only if classif_qual is 'P'. ",
        title="Classification auto Id",
    )
    classif_auto_score: Optional[float] = Field(
        None,
        description="Set if the object was ever predicted, remains forever with these value. Reflect the 'last state' only if classif_qual is 'P'. The classification auto score is generally between 0 and 1. This is a confidence score, in the fact that, the taxon prediction for this object is correct.",
        examples=[0.085],
        title="Classification auto score",
    )
    classif_auto_when: Optional[datetime] = Field(
        None,
        description="Set if the object was ever predicted, remains forever with these value. Reflect the 'last state' only if classif_qual is 'P'. The classification date.",
        examples=["2021-09-21T14:59:01.007110"],
        title="Classification auto when",
    )
    objid: int = Field(
        ..., description="The object Id.", examples=[264409236], title="Object Id"
    )
    acquisid: int = Field(
        ...,
        description="The parent acquisition Id.",
        examples=[144],
        title="Acquisition Id",
    )
    classif_id: Optional[int] = Field(
        None,
        description="The classification Id.",
        examples=[82399],
        title="Classification Id",
    )
    objtime: Optional[datetime] = Field(None, title="Object time")
    latitude: Optional[float] = Field(
        None, description="The latitude.", examples=[42.0231666666667], title="Latitude"
    )
    longitude: Optional[float] = Field(
        None,
        description="The longitude.",
        examples=[4.71766666666667],
        title="Longitude",
    )
    depth_min: Optional[float] = Field(
        None, description="The min depth.", examples=[0], title="Depth min"
    )
    depth_max: Optional[float] = Field(
        None, description="The min depth.", examples=[300], title="Depth max"
    )
    objdate: Optional[date] = Field(None, title="Object date")
    classif_qual: Optional[str] = Field(
        None,
        description="The classification qualification. Could be **P** for predicted, **V** for validated or **D** for Dubious.",
        examples=["P"],
        title="Classification qualification",
    )
    sunpos: Optional[str] = Field(
        None,
        description="Sun position, from date, time and coords.",
        examples=["N"],
        title="Sun position",
    )
    classif_score: Optional[float] = Field(
        None,
        description="The ML score for this object, if **P**.",
        examples=["null"],
        title="Classification score",
    )
    classif_who: Optional[int] = Field(
        None,
        description="The user who manually classified this object, if **V** or **D**.",
        examples=["null"],
        title="Classification who",
    )
    orig_id: str = Field(
        ...,
        description="Original object ID from initial TSV load.",
        examples=["deex_leg1_48_406"],
        title="Original id",
    )
    object_link: Optional[str] = Field(
        None,
        description="Object link.",
        examples=["http://www.zooscan.obs-vlfr.fr//"],
        title="Object link",
    )
    complement_info: Optional[str] = Field(
        None, examples=["Part of ostracoda"], title="Complement info"
    )
    sample_id: int = Field(
        ...,
        description="Sample (i.e. parent of parent acquisition) ID.",
        examples=[12],
        title="Sample id",
    )
    project_id: int = Field(
        ...,
        description="Project (i.e. parent of sample) ID.",
        examples=[76],
        title="Project id",
    )
    images: Optional[List[ImageModel]] = Field(
        [],
        description="Images for this object.",
        examples=[
            [
                {
                    "imgid": 376456,
                    "objid": 376456,
                    "imgrank": 0,
                    "file_name": "0037/6456.jpg",
                    "orig_file_name": "dewex_leg2_63_689.jpg",
                    "width": 98,
                    "height": 63,
                    "thumb_file_name": "null",
                    "thumb_width": "null",
                    "thumb_height": "null",
                }
            ]
        ],
        title="Images",
    )
    free_columns: Optional[Dict[str, Any]] = Field(
        {},
        description="Free columns from object mapping in project.",
        examples=[{"area": 49.0, "mean": 232.27, "stddev": 2.129}],
        title="Free columns",
    )
    classif_crossvalidation_id: Optional[int] = Field(
        None,
        description="Always NULL, kept for compat.",
        examples=["null"],
        title="Classification crossvalidation Id",
    )
    similarity: Optional[float] = Field(
        None,
        description="Always NULL, kept for compat.",
        examples=["null"],
        title="Similarity",
    )
    random_value: int = Field(
        ...,
        description="Random value associated to an image",
        examples=[1234],
        title="random_value",
    )


class ObjectSetQueryRsp(BaseModel):
    object_ids: Optional[List[int]] = Field(
        [],
        description="Matching object IDs.",
        examples=[[634509, 6234516, 976544]],
        title="Object Ids",
    )
    acquisition_ids: Optional[List[int]] = Field(
        [],
        description="Parent (acquisition) IDs.",
        examples=[[23, 987, 89]],
        title="Acquisition Ids",
    )
    sample_ids: Optional[List[int]] = Field(
        [],
        description="Parent (sample) IDs.",
        examples=[[234, 194, 12]],
        title="Sample Ids",
    )
    project_ids: Optional[List[int]] = Field(
        [], description="Project Ids.", examples=[[22, 43]], title="Project Ids"
    )
    details: Optional[List[List]] = Field(
        [],
        description="Requested fields, in request order.",
        examples=[
            [
                [7.315666666666667, 43.685],
                [7.315666666666667, 43.685],
                [7.315666666666667, 43.685],
            ]
        ],
        title="Details",
    )
    total_ids: Optional[int] = Field(
        0,
        description="Total rows returned by the query, even if it was window-ed.",
        examples=[1000],
        title="Total Ids",
    )


class ObjectSetRevertToHistoryRsp(BaseModel):
    last_entries: Optional[List[HistoricalLastClassif]] = Field(
        [],
        description="Object + last classification",
        examples=[
            [
                {
                    "objid": 264409236,
                    "classif_id": 82399,
                    "histo_classif_date": "2021-09-21T14:59:01.007110",
                    "histo_classif_type": "M",
                    "histo_classif_id": 56,
                    "histo_classif_qual": "V",
                    "histo_classif_who": 3876,
                }
            ]
        ],
        title="Last entries",
    )
    classif_info: Optional[Dict[str, Any]] = Field(
        {},
        description="Classification names (self+parent) for involved IDs.",
        examples=[{"25932": ["Oikopleuridae", "Appendicularia"]}],
        title="Classification info",
    )


class ObjectSetSummaryRsp(BaseModel):
    total_objects: Optional[int] = Field(
        None,
        description="Total number of objects in the set.",
        examples=[300],
        title="Total objects",
    )
    validated_objects: Optional[int] = Field(
        None,
        description="Number of validated objects in the set.",
        examples=[100],
        title="Validated objects",
    )
    dubious_objects: Optional[int] = Field(
        None,
        description="Number of dubious objects in the set.",
        examples=[100],
        title="Dubious objects",
    )
    predicted_objects: Optional[int] = Field(
        None,
        description="Number of predicted objects in the set.",
        examples=[100],
        title="Predicted objects",
    )


class OrganizationModel(BaseModel):
    id: int = Field(
        ...,
        description="OrganizationIDT unique identifier.",
        examples=[1],
        title="Organization Id",
    )
    name: str = Field(
        ...,
        description="Organization's full name, as text.",
        examples=["OrganizationName"],
        title="Organization Name",
    )
    directories: Optional[str] = Field(
        None,
        description="References to official directories where the organization is referenced, separated by ,.",
        examples=["edmo:1278"],
        title="Directories",
    )


class PredictionInfoRsp(BaseModel):
    result: Optional[List[List[Any]]] = Field(
        [],
        description="List of lists [object ID, category ID, score for category].",
        examples=[[[23456, 1234, 0.7], [23457, 768, 0.2]]],
        title="Result",
    )


class PredictionInfoT(BaseModel):
    object_id: int = Field(..., title="Object Id")
    classif_id: int = Field(..., title="Classif Id")
    score: float = Field(..., title="Score")


class PredictionReq(BaseModel):
    project_id: int = Field(
        ...,
        description="The destination project, of which objects will be predicted.",
        title="Project Id",
    )
    source_project_ids: List[int] = Field(
        ...,
        description="The source projects, objects in them will serve as reference.",
        min_length=1,
        title="Source project Ids",
    )
    learning_limit: Optional[int] = Field(
        None,
        description="When set (to a positive value), there will be this number  of objects, _per category_, in the learning set.",
        title="Source projects fetching limit",
    )
    features: List[str] = Field(
        ...,
        description="The object features AKA free column, to use in the algorithm. Features must be common to all projects, source ones and destination one.",
        min_length=1,
        title="Features",
    )
    categories: List[int] = Field(
        ...,
        description="In source projects, only objects validated with these categories will be considered.",
        min_length=1,
        title="Categories",
    )
    use_scn: Optional[bool] = Field(
        False,
        description="Use extra features, generated using the image, for improving the prediction.",
        title="Use scn",
    )
    pre_mapping: Dict[str, int] = Field(
        ...,
        description="Categories in keys become value one before launching the ML algorithm. Any unknown value is ignored.",
        title="Categories pre-mapping",
    )


class PredictionRsp(BaseModel):
    errors: Optional[List[str]] = Field(
        [],
        description="Showstopper problems found while preparing the prediction.",
        examples=[[]],
        title="Errors",
    )
    warnings: Optional[List[str]] = Field(
        [],
        description="Problems found while preparing the prediction.",
        examples=[[]],
        title="Warnings",
    )
    job_id: Optional[int] = Field(
        0,
        description="The created job, 0 if there were problems.",
        examples=[482],
        title="Job Id",
    )


class ProcessModel(BaseModel):
    processid: int = Field(
        ..., description="The process Id.", examples=[1000], title="Process id"
    )
    orig_id: str = Field(
        ...,
        description="Original process ID from initial TSV load.",
        examples=["zooprocess_045"],
        title="Original id",
    )
    free_columns: Optional[Dict[str, Any]] = Field(
        {},
        examples=[
            {
                "software": "zooprocess_pid_to_ecotaxa_7.26_2017/12/19",
                "pressure_gain": "10",
            }
        ],
        title="Free columns from process mapping in project",
    )


class ProjectColumnsModel(BaseModel):
    projid: Optional[int] = Field(
        None, description="Project ID from the call.", title="Project ID"
    )
    columns: Optional[List[str]] = Field(
        None, description="Column names from the call.", title="Columns"
    )
    values: Optional[List[str]] = Field(
        None, description="All rows regardless of emptiness.", title="All rows"
    )


class ProjectFilters(BaseModel):
    taxo: Optional[str] = Field(
        None,
        description="Coma-separated list of numeric taxonomy/category ids. Only include objects classified with one of them.",
        examples=["12,7654,5409"],
        title="Taxo",
    )
    taxochild: Optional[str] = Field(
        None,
        description="If 'Y' and taxo is set, also include children of each member of 'taxo' list in taxonomy tree.",
        examples=["Y"],
        title="Taxo child",
    )
    statusfilter: Optional[constr(max_length=3)] = Field(
        None,
        description="Include objects with given status:\n            'NV': Not validated \n            'PV': Predicted or Validated \n            'PVD': Predicted or Validated or Dubious\n            'NVM': Validated, but not by me \n            'VM': Validated by me \n            'U': Not classified\n            other: direct equality comparison with DB value \n        ",
        examples=["NV"],
        title="Statusfilter",
    )
    MapN: Optional[str] = Field(
        None,
        description="If all 4 are set (MapN, MapW, MapE, MapS), include objects inside the defined bounding rectangle.",
        examples=[44.34],
        title="Map North",
    )
    MapW: Optional[str] = Field(
        None,
        description="If all 4 are set (MapN, MapW, MapE, MapS), include objects inside the defined bounding rectangle.",
        examples=[3.88],
        title="Map West",
    )
    MapE: Optional[str] = Field(
        None,
        description="If all 4 are set (MapN, MapW, MapE, MapS), include objects inside the defined bounding rectangle.",
        examples=[7.94],
        title="Map East",
    )
    MapS: Optional[str] = Field(
        None,
        description="If all 4 are set (MapN, MapW, MapE, MapS), include objects inside the defined bounding rectangle.",
        examples=[42.42],
        title="Map South",
    )
    depthmin: Optional[str] = Field(
        None,
        description="Positive values. If both are set (depthmin, depthmax), include objects for which both depths (min and max) are inside the range.",
        examples=["10"],
        title="Depthmin",
    )
    depthmax: Optional[str] = Field(
        None,
        description="Positive values. If both are set (depthmin, depthmax), include objects for which both depths (min and max) are inside the range.",
        examples=["110"],
        title="Depthmax",
    )
    samples: Optional[str] = Field(
        None,
        description="Coma-separated list of sample IDs, include only objects for these samples.",
        examples=["10987,3456,987,38"],
        title="Samples",
    )
    instrum: Optional[str] = Field(
        None,
        description="Instrument name, include objects for which sampling was done using this instrument.",
        examples=["uvp5"],
        title="Instrument",
    )
    daytime: Optional[str] = Field(
        None,
        description="Coma-separated list of sun position values: D for Day, U for Dusk, N for Night, A for Dawn (Aube in French).",
        examples=["N,A"],
        title="Day time",
    )
    month: Optional[str] = Field(
        None,
        description="Coma-separated list of month numbers, 1=Jan and so on.",
        examples=["11,12"],
        title="Month",
    )
    fromdate: Optional[str] = Field(
        None,
        description="Format is 'YYYY-MM-DD', include objects collected after this date.",
        examples=["2020-10-09"],
        title="From date",
    )
    todate: Optional[str] = Field(
        None,
        description="Format is 'YYYY-MM-DD', include objects collected before this date.",
        examples=["2021-10-09"],
        title="To date",
    )
    fromtime: Optional[str] = Field(
        None,
        description="Format is 'HH24:MM:SS', include objects collected after this time of day.",
        examples=["1:17:00"],
        title="From time",
    )
    totime: Optional[str] = Field(
        None,
        description="Format is 'HH24:MM:SS', include objects collected before this time of day.",
        examples=["23:32:00"],
        title="To time",
    )
    inverttime: Optional[str] = Field(
        None,
        description="If '1', include objects outside fromtime and totime range.",
        examples=["0"],
        title="Invert time",
    )
    validfromdate: Optional[str] = Field(
        None,
        description="Format is 'YYYY-MM-DD HH24:MI', include objects validated/set to dubious after this date+time.",
        examples=["2020-10-09 10:00:00"],
        title="Valid from date",
    )
    validtodate: Optional[str] = Field(
        None,
        description="Format is 'YYYY-MM-DD HH24:MI', include objects validated/set to dubious before this date+time.",
        examples=["2021-10-09 10:00:00"],
        title="Valid to date",
    )
    freenum: Optional[str] = Field(
        None,
        description="Numerical DB column number in Object as basis for the 2 following criteria (freenumst, freenumend).",
        examples=["n01"],
        title="Free num",
    )
    freenumst: Optional[str] = Field(
        None,
        description="Start of included range for the column defined by freenum, in which objects are included.",
        examples=["0"],
        title="Freenum start",
    )
    freenumend: Optional[str] = Field(
        None,
        description="End of included range for the column defined by freenum, in which objects are included.",
        examples=["999999"],
        title="Free num end",
    )
    freetxt: Optional[str] = Field(
        None,
        description=" Textual DB column number as basis for following criteria (freetxtval)\n            If starts with 's' then it's a text column in Sample\n            If starts with 'a' then it's a text column in Acquisition \n            If starts with 'p' then it's a text column in Process \n            If starts with 'o' then it's a text column in Object .\n        ",
        examples=["p01"],
        title="Free text",
    )
    freetxtval: Optional[str] = Field(
        None,
        description="Text to match in the column defined by freetxt, for an object to be include.",
        examples=["zooprocess"],
        title="Free text val",
    )
    filt_annot: Optional[str] = Field(
        None,
        description="Coma-separated list of annotators, i.e. persons who validated the classification at any point in time.",
        examples=["34,67,67"],
        title="Filter annotator",
    )
    filt_last_annot: Optional[str] = Field(
        None,
        description="Coma-separated list of annotators, i.e. persons who validated the classification in last.",
        examples=["34,67"],
        title="Filter last annotator",
    )


class ProjectFiltersDict(BaseModel):
    taxo: Optional[str] = Field(None, title="Taxo")
    taxochild: Optional[str] = Field(None, title="Taxochild")
    statusfilter: Optional[str] = Field(None, title="Statusfilter")
    MapN: Optional[str] = Field(None, title="Mapn")
    MapW: Optional[str] = Field(None, title="Mapw")
    MapE: Optional[str] = Field(None, title="Mape")
    MapS: Optional[str] = Field(None, title="Maps")
    depthmin: Optional[str] = Field(None, title="Depthmin")
    depthmax: Optional[str] = Field(None, title="Depthmax")
    samples: Optional[str] = Field(None, title="Samples")
    instrum: Optional[str] = Field(None, title="Instrum")
    daytime: Optional[str] = Field(None, title="Daytime")
    month: Optional[str] = Field(None, title="Month")
    fromdate: Optional[str] = Field(None, title="Fromdate")
    todate: Optional[str] = Field(None, title="Todate")
    fromtime: Optional[str] = Field(None, title="Fromtime")
    totime: Optional[str] = Field(None, title="Totime")
    inverttime: Optional[str] = Field(None, title="Inverttime")
    validfromdate: Optional[str] = Field(None, title="Validfromdate")
    validtodate: Optional[str] = Field(None, title="Validtodate")
    freenum: Optional[str] = Field(None, title="Freenum")
    freenumst: Optional[str] = Field(None, title="Freenumst")
    freenumend: Optional[str] = Field(None, title="Freenumend")
    freetxt: Optional[str] = Field(None, title="Freetxt")
    freetxtval: Optional[str] = Field(None, title="Freetxtval")
    filt_annot: Optional[str] = Field(None, title="Filt Annot")
    filt_last_annot: Optional[str] = Field(None, title="Filt Last Annot")


class ProjectModel(BaseModel):
    projid: int = Field(
        ..., description="The project Id.", examples=[4824], title="Project Id"
    )
    title: str = Field(
        ..., description="The project title.", examples=["MyProject"], title="Title"
    )
    visible: Optional[bool] = Field(
        None,
        description="The project visibility. (deprecated) ",
        examples=[False],
        title="Visible",
    )
    access: str = Field(
        ...,
        description='When "1" (PUBLIC), the project is visible by all users.PUBLIC: "1", OPEN: "2", PRIVATE: "0"',
        examples=["1"],
        title="Access level",
    )
    status: Optional[str] = Field(
        None, description="The project status.", examples=["Annotate"], title="Status"
    )
    objcount: Optional[float] = Field(
        None,
        description="The number of objects.",
        examples=[32292.0],
        title="Object count",
    )
    pctvalidated: Optional[float] = Field(
        None,
        description="Percentage of validated images.",
        examples=[0.015483711135885049],
        title="Percentage validated",
    )
    pctclassified: Optional[float] = Field(
        None,
        description="Percentage of classified images.",
        examples=[100.0],
        title="Percentage classified",
    )
    classifsettings: Optional[str] = Field(
        None,
        examples=[
            "baseproject=1602\ncritvar=%area,angle,area,area_exc,bx,by,cdexc,centroids,circ.,circex,convarea,convperim,cv,elongation,esd,fcons,feret,feretareaexc,fractal,height,histcum1,histcum2,histcum3,intden,kurt,lat_end,lon_end,major,max,mean,meanpos,median,min,minor,mode,nb1,nb2,perim.,perimareaexc,perimferet,perimmajor,range,skelarea,skew,slope,sr,stddev,symetrieh,symetriehc,symetriev,symetrievc,thickr,width,x,xm,xstart,y,ym,ystart\nposttaxomapping=\nseltaxo=45074,84963,61990,13333,82399,61973,62005,25930,25932,61996,78426,81941,11514,85076,85061,30815,85185,92230,85079,84993,25824,85115,85004,26525,25944,11509,26524,92112,84976,25942,84980,85078,78418,84977,85060,61993,61991,85069,81871,74144,11758,72431,13381,11518,5,18758,85117,92042,84968,84997,87826,92236,92237,92039,84989,85193,83281,78412,92239,71617,81977,45071,12865,85044,81940,85067,12908,85116,56693,85008,92139,92068\nusemodel_foldername=testln1"
        ],
        title="Classification settings",
    )
    classiffieldlist: Optional[str] = Field(
        None,
        examples=[
            "depth_min=depth_min\r\ndepth_max=depth_max\r\narea=area [pixel]\r\nmean=mean [0-255]\r\nfractal=fractal\r\nmajor=major [pixel]\r\nsymetrieh=symetrieh\r\ncirc.=circ\r\nferet = Feret [pixel]"
        ],
        title="Classification field list",
    )
    popoverfieldlist: Optional[str] = Field(
        None,
        examples=[
            "depth_min=depth_min\r\ndepth_max=depth_max\r\narea=area [pixel]\r\nmean=mean [0-255]\r\nfractal=fractal\r\nmajor=major [pixel]\r\nsymetrieh=symetrieh\r\ncirc.=circ\r\nferet = Feret [pixel]"
        ],
        title="Pop over field list",
    )
    comments: Optional[str] = Field(
        None, description="The project comments.", examples=[""], title="Comments"
    )
    description: Optional[str] = Field(
        None,
        description="The project description, i.e. main traits.",
        examples=[""],
        title="Description",
    )
    rf_models_used: Optional[str] = Field(None, examples=[""], title="Rf models used")
    cnn_network_id: Optional[str] = Field(
        None, examples=["SCN_zooscan_group1"], title="Cnn network id"
    )
    formulae: Optional[str] = Field(
        None, description="Concentration formulae.", examples=[""], title="Formulae"
    )
    obj_free_cols: Optional[Dict[str, str]] = Field(
        {},
        description="Object free columns.",
        examples=[{"area": "n01", "esd": "n02"}],
        title="Object free cols",
    )
    sample_free_cols: Optional[Dict[str, str]] = Field(
        {},
        description="Sample free columns.",
        examples=[{"barcode": "t01"}],
        title="Sample free cols",
    )
    acquisition_free_cols: Optional[Dict[str, str]] = Field(
        {},
        description="Acquisition free columns.",
        examples=[{"flash_delay": "t01"}],
        title="Acquisition free cols",
    )
    process_free_cols: Optional[Dict[str, str]] = Field(
        {},
        description="Process free columns.",
        examples=[{"nb_images": "t01"}],
        title="Process free cols",
    )
    bodc_variables: Optional[Dict[str, Optional[str]]] = Field(
        {},
        description="BODC quantities from columns. Only the 3 keys listed in example are valid.",
        examples=[
            {
                "subsample_coef": "1/ssm.sub_part",
                "total_water_volume": "sam.tot_vol/1000",
                "individual_volume": "4.0/3.0*math.pi*(math.sqrt(obj.area/math.pi)*ssm.pixel_size)**3",
            }
        ],
        title="Expressions for computing standard BODC quantities.",
    )
    init_classif_list: Optional[List[int]] = Field(
        [],
        description="Favorite taxa used in classification.",
        examples=[[5, 11493, 11498, 11509]],
        title="Init classification list",
    )
    managers: Optional[List[MinUserModel]] = Field(
        [], description="Managers of this project.", title="Managers"
    )
    annotators: Optional[List[MinUserModel]] = Field(
        [],
        description="Annotators of this project, if not manager.",
        title="Annotators",
    )
    viewers: Optional[List[MinUserModel]] = Field(
        [],
        description="Viewers of this project, if not manager nor annotator.",
        title="Viewers",
    )
    contact: Optional[MinUserModel] = Field(
        None,
        description="The contact person is a manager who serves as the contact person for other users and EcoTaxa's managers.",
        title="Contact",
    )
    instrument: Optional[str] = Field(
        None,
        description="This project's instrument code.",
        examples=["Zooscan"],
        title="Instrument",
    )
    instrument_url: Optional[str] = Field(
        None,
        description="This project's instrument BODC definition.",
        examples=["http://vocab.nerc.ac.uk/collection/L22/current/TOOL1581/"],
        title="Instrument URL",
    )
    highest_right: Optional[str] = Field(
        "",
        description="The highest right for requester on this project. One of 'Manage', 'Annotate', 'View'.",
        examples=["View"],
        title="Highest right",
    )


class ProjectSetColumnStatsModel(BaseModel):
    proj_ids: Optional[List[int]] = Field(
        None, description="Projects IDs from the call.", title="Projects IDs"
    )
    total: Optional[int] = Field(
        None, description="All rows regardless of emptiness.", title="Total of rows"
    )
    columns: Optional[List[str]] = Field(
        None, description="Column names from the call.", title="Columns"
    )
    counts: Optional[List[int]] = Field(
        None, description="Counts of non-empty values, one per column.", title="Counts"
    )
    variances: Optional[List[float]] = Field(
        None, description="Variances of values, one per column.", title="Variances"
    )


class ProjectSummaryModel(BaseModel):
    projid: int = Field(
        ..., description="Project unique identifier.", examples=[1], title="Project Id"
    )
    title: str = Field(
        ...,
        description="Project's title.",
        examples=["Zooscan Tara Med"],
        title="Project title",
    )


class ProjectTaxoStatsModel(BaseModel):
    projid: int = Field(
        ..., description="The project id.", examples=[1], title="projid"
    )
    used_taxa: Optional[List[int]] = Field(
        [],
        description="The taxa/category ids used inside the project. An id of -1 means some unclassified objects.",
        examples=[[45072, 78418, 84963, 85011, 85012, 85078]],
        title="used_taxa",
    )
    nb_unclassified: int = Field(
        ...,
        description="The number of unclassified objects inside the project.",
        examples=[0],
        title="nb_unclassified",
    )
    nb_validated: int = Field(
        ...,
        description="The number of validated objects inside the project.",
        examples=[5000],
        title="nb_validated",
    )
    nb_dubious: int = Field(
        ...,
        description="The number of dubious objects inside the project.",
        examples=[56],
        title="nb_dubious",
    )
    nb_predicted: int = Field(
        ...,
        description="The number of predicted objects inside the project.",
        examples=[1345],
        title="nb_predicted",
    )


class ResetPasswordReq(BaseModel):
    id: Optional[int] = Field(
        -1, description="User unique identifier.", examples=[1], title="User Id"
    )
    email: Optional[str] = Field(None, title="Email")
    password: Optional[str] = Field(None, title="Password")


class SampleModel(BaseModel):
    sampleid: int = Field(
        ..., description="The sample Id.", examples=[100], title="Sample Id"
    )
    projid: int = Field(
        ..., description="The project Id.", examples=[4], title="Project Id"
    )
    orig_id: str = Field(
        ...,
        description="Original sample ID from initial TSV load.",
        examples=["dewex_leg2_19"],
        title="Original id",
    )
    latitude: Optional[float] = Field(
        None, description="The latitude.", examples=[42.0231666666667], title="Latitude"
    )
    longitude: Optional[float] = Field(
        None,
        description="The longitude.",
        examples=[4.71766666666667],
        title="Longitude",
    )
    dataportal_descriptor: Optional[str] = Field(
        None, examples=[""], title="Dataportal descriptor."
    )
    free_columns: Optional[Dict[str, Any]] = Field(
        {},
        description="Free columns from sample mapping in project.",
        examples=[{"flash_delay": "t01"}],
        title="Free columns",
    )


class SampleTaxoStatsModel(BaseModel):
    sample_id: Optional[int] = Field(
        None, description="The sample id.", title="Sample id"
    )
    used_taxa: Optional[List[int]] = Field(
        None,
        description="The taxa/category ids used inside the sample. -1 for unclassified objects.",
        title="Used taxa",
    )
    nb_unclassified: Optional[int] = Field(
        None,
        description="The number of unclassified objects inside the sample.",
        title="Number unclassified",
    )
    nb_validated: Optional[int] = Field(
        None,
        description="The number of validated objects inside the sample.",
        title="Number validated",
    )
    nb_dubious: Optional[int] = Field(
        None,
        description="The number of dubious objects inside the sample.",
        title="Number dubious",
    )
    nb_predicted: Optional[int] = Field(
        None,
        description="The number of predicted objects inside the sample.",
        title="Number predicted",
    )


class SciExportTypeEnum(Enum):
    ABO = "ABO"
    CNC = "CNC"
    BIV = "BIV"


class SimilaritySearchRsp(BaseModel):
    neighbor_ids: List[int] = Field(
        ..., description="The list of similar objects IDs.", title="Neighbor IDs"
    )
    sim_scores: List[float] = Field(
        ...,
        description="The list of similarity scores, between 0 and 1. The higher the closer, e.g. 1 for the target_id itself.",
        title="Similarity Scores",
    )
    message: Optional[str] = Field(
        None,
        description="A message to the user. If not 'Success' then some condition prevented the computation.",
        title="Message",
    )


class SimpleImportReq(BaseModel):
    source_path: str = Field(
        ...,
        description="Source path on server, to zip or plain directory.",
        examples=["/import_test"],
        title="Source path",
    )
    values: Dict[str, str] = Field(
        ...,
        description=":imgdate, imgtime, latitude, longitude, depthmin, depthmax, taxolb, userlb, datelb, status",
        examples=[{"latitude": 43.69, "longitude": 7.3}],
        title="Constant values, per field, to write for all images. If a field has no value don't include it.",
    )
    possible_values: Optional[List[str]] = Field(
        [
            "imgdate",
            "imgtime",
            "latitude",
            "longitude",
            "depthmin",
            "depthmax",
            "taxolb",
            "userlb",
            "datelb",
            "status",
        ],
        title="Possible Values",
    )


class SimpleImportRsp(BaseModel):
    job_id: int = Field(
        ...,
        description="The job which was created for the run. 0 if called with dry_run option.",
        examples=[1],
        title="Job Id",
    )
    errors: List[str] = Field(
        ...,
        description="Validation errors, dry_run or not.",
        examples=[
            [
                "'abcde' is not a valid value for SimpleImportFields.latitude",
                "'456.5' is not a valid value for SimpleImportFields.longitude",
                "'very very low' is not a valid value for SimpleImportFields.depthmin",
            ]
        ],
        title="Errors",
    )


class SubsetReq(BaseModel):
    filters: Optional[ProjectFiltersDict] = Field(
        {},
        description="The filters to apply to project.",
        examples=[{"freenum": "n01", "freenumst": "0"}],
        title="Filters",
    )
    dest_prj_id: int = Field(
        ...,
        description="The destination project ID.",
        examples=[22],
        title="Destination project id",
    )
    group_type: GroupDefinitions = Field(
        ...,
        description="Define the groups in which to apply limits. C for categories, S for samples, A for acquisitions.",
        examples=["A"],
        title="Group type",
    )
    limit_type: LimitMethods = Field(
        ...,
        description="The type of limit_value: P for %, V for constant, both per group.",
        examples=["P"],
        title="Limit type",
    )
    limit_value: float = Field(
        ...,
        description="Limit value, e.g. 20% or 5 per copepoda or 5% per sample.",
        examples=[10.0],
        title="Limit value",
    )


class SubsetRsp(BaseModel):
    job_id: int = Field(
        ...,
        description="The job created for this operation.",
        examples=[143],
        title="Job Id",
    )


class SummaryExportGroupingEnum(Enum):
    field_ = ""
    S = "S"
    A = "A"
    P = "P"


class SummaryExportQuantitiesOptionsEnum(Enum):
    abundance = "abundance"
    concentration = "concentration"
    biovolume = "biovolume"


class SummaryExportSumOptionsEnum(Enum):
    none = "none"
    sample = "sample"
    acquisition = "acquisition"


class TaxaSearchRsp(BaseModel):
    id: int = Field(
        ..., description="The taxon/category IDs.", examples=[14334], title="Id"
    )
    renm_id: Optional[int] = Field(
        None,
        description="The advised replacement ID if the taxon/category is deprecated.",
        examples=["null"],
        title="Renm_id",
    )
    text: str = Field(
        ...,
        description="The taxon name, display one.",
        examples=["Bangia"],
        title="Text",
    )
    pr: int = Field(
        ...,
        description="1 if the taxon is in project list, 0 otherwise.",
        examples=[0],
        title="Pr",
    )


class TaxonCentral(BaseModel):
    id: int = Field(
        ...,
        description="The unique numeric id of the taxon.",
        examples=[12876],
        title="Id",
    )
    parent_id: Optional[int] = Field(
        None,
        description="The unique numeric id of the taxon parent.",
        examples=[11509],
        title="Parent id",
    )
    name: str = Field(
        ...,
        description="The name of the taxon.",
        examples=["Echinodermata X"],
        title="Name",
    )
    id_source: Optional[str] = Field(
        None, description="The source ID.", examples=["70372"], title="Id source"
    )
    taxotype: str = Field(
        ...,
        description="The taxon type, 'M' for Morpho or 'P' for Phylo.",
        examples=["P"],
        title="Taxo type",
    )
    display_name: Optional[str] = Field(
        None,
        description="The display name of the taxon. It is suffixed in EcoTaxoServer with (Deprecated) when taxostatus is 'D'",
        examples=["Echinodermata X"],
        title="Display name",
    )
    lastupdate_datetime: Optional[datetime] = Field(
        None,
        description="Taxon last update. Date, with format YYYY-MM-DD hh:mm:ss.",
        examples=["2021-08-20 09:09:40"],
        title="Last update datetime",
    )
    id_instance: Optional[int] = Field(
        None, description="The instance Id.", examples=[1], title="Id instance"
    )
    taxostatus: str = Field(
        ...,
        description="The taxon status, N for Not approved, A for Approved or D for Deprecated.",
        examples=["A"],
        title="Taxo status",
    )
    rename_to: Optional[int] = Field(
        None,
        description="The advised replacement Name if the taxon is deprecated.",
        examples=["null"],
        title="Rename to",
    )
    source_url: Optional[str] = Field(
        None,
        description="The source url.",
        examples=["http://www.google.fr/"],
        title="Source url",
    )
    source_desc: Optional[str] = Field(
        None,
        description="The source description.",
        examples=["null"],
        title="Source desc",
    )
    creator_email: Optional[str] = Field(
        None,
        description="Email of the creator of the taxon.",
        examples=["creator.user@emaim.com"],
        title="Creator email",
    )
    creation_datetime: Optional[datetime] = Field(
        None,
        description="Taxon creation date. Date, with format YYYY-MM-DD hh:mm:ss.",
        examples=["2021-08-20 09:09:39"],
        title="Creation datetime",
    )
    nbrobj: Optional[int] = Field(
        None,
        description="Number of objects in this category exactly.",
        examples=["5800"],
        title="Number of objects",
    )
    nbrobjcum: Optional[int] = Field(
        None,
        description="Number of objects in this category and descendant ones.",
        examples=["54800"],
        title="Number of descendant objects",
    )


class TaxonModel(BaseModel):
    id: int = Field(
        ..., description="The taxon/category IDs.", examples=[1], title="Id"
    )
    renm_id: Optional[int] = Field(
        None,
        description="The advised replacement ID if the taxon/category is deprecated.",
        examples=["null"],
        title="Renm id",
    )
    name: str = Field(
        ...,
        description="The taxon/category verbatim name.",
        examples=["living"],
        title="Name",
    )
    type: str = Field(
        ...,
        description="The taxon/category type, 'M' for Morpho or 'P' for Phylo.",
        examples=["P"],
        title="Type",
    )
    nb_objects: int = Field(
        ...,
        description="How many objects are classified in this category.",
        examples=[34118],
        title="Nb objects",
    )
    nb_children_objects: int = Field(
        ...,
        description="How many objects are classified in this category children (not itself).",
        examples=[30091727],
        title="Nb children objects",
    )
    display_name: str = Field(
        ...,
        description="The taxon/category display name.",
        examples=["living<"],
        title="Display name",
    )
    lineage: List[str] = Field(
        ...,
        description="The taxon/category name of ancestors, including self, in first.",
        examples=[["living"]],
        title="Lineage",
    )
    id_lineage: List[int] = Field(
        ...,
        description="The taxon/category IDs of ancestors, including self, in first.",
        examples=[[1]],
        title="Id lineage",
    )
    children: List[int] = Field(
        ...,
        description="The taxon/category IDs of children.",
        examples=[
            [
                92952,
                2,
                92329,
                85048,
                4,
                93599,
                93687,
                85011,
                92951,
                93698,
                84961,
                92696,
                3,
            ]
        ],
        title="Children",
    )


class TaxonUsageModel(BaseModel):
    projid: int = Field(
        ..., description="Project unique identifier.", examples=[1], title="Project Id"
    )
    title: str = Field(
        ...,
        description="Project's title.",
        examples=["Zooscan Tara Med"],
        title="Project title",
    )
    nb_validated: int = Field(
        ...,
        description="How many validated objects in this category in this project.",
        examples=[129],
        title="Nb validated",
    )


class TaxonomyRecast(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    from_to: Dict[str, int] = Field(
        ...,
        description="Mapping from seen taxon (key) to output replacement one (value). Use a null replacement to _discard_ the present taxon. Note: keys are strings.",
        examples=[{"456": 956, "2456": 213}],
        title="Categories mapping",
    )
    doc: Optional[Dict[str, str]] = Field(
        None,
        description="To keep memory of the reasons for the above mapping. Note: keys are strings.",
        examples=[
            {
                "456": "Up to species",
                "2456": "Up to nearest non-morpho",
                "9134": "Detritus",
            }
        ],
        title="Mapping documentation",
    )


class TaxonomyTreeStatus(BaseModel):
    last_refresh: Optional[str] = Field(
        None,
        description="Taxonomy tree last refresh/sync from taxonomy server. Date, with format YYYY-MM-DDThh:mm:ss.",
        examples=["2021-10-07T01:26:47"],
        title="Last refresh",
    )


class UserActivateReq(BaseModel):
    token: Optional[str] = Field(
        None,
        description="token when the user is not an admin and must confirm the email. ",
        title="token",
    )
    reason: Optional[str] = Field(
        None,
        description="status,optional users administrator comment related to the status. ",
        examples=["Email is not accepted...."],
        title="Reason",
    )
    password: Optional[str] = Field(
        None,
        description="Existing user can modify own email and must confirm it with token and password when email confirmation is on. ",
        title="Password",
    )


class UserActivity(BaseModel):
    id: Optional[int] = Field(None, title="Id")
    nb_actions: Optional[int] = Field(None, title="Nb Actions")
    last_annot: Optional[str] = Field(None, title="Last Annot")


class UserModelWithRights(BaseModel):
    id: int = Field(
        ..., description="The unique numeric id of this user.", examples=[1], title="Id"
    )
    email: str = Field(
        ...,
        description="User's email address, as text, used during registration.",
        examples=["ecotaxa.api.user@gmail.com"],
        title="Email",
    )
    name: str = Field(
        ...,
        description="User's full name, as text.",
        examples=["userName"],
        title="Name",
    )
    country: Optional[str] = Field(
        None,
        description="The country name, as text (but chosen in a consistent list).",
        examples=["France"],
        title="Country",
    )
    orcid: Optional[str] = Field(
        None,
        description="The orcid id https://support.orcid.org.",
        examples=["0000-0001-2345-6789"],
        title="ORCID ID",
    )
    usercreationdate: Optional[datetime] = Field(
        None,
        description="The date of creation of the user, as text formatted according to the ISO 8601 standard.",
        examples=["2020-11-05T12:31:48.299713"],
        title="User creation date",
    )
    password: Optional[str] = Field(
        None,
        description="Encrypted (or not) password.",
        examples=["$foobar45$"],
        title="User's password'",
    )
    status: Optional[int] = Field(
        None,
        description="Status of the user : 1 for active, 0 for inactive ,2 for pending, -1 for blocked",
        examples=[1],
        title="Account status",
    )
    status_date: Optional[datetime] = Field(
        None,
        description="Timestamp status modification date",
        examples=["2020-11-05T12:31:48.299713"],
        title="status date",
    )
    status_admin_comment: Optional[str] = Field(
        None,
        description="Optional Users admininistrator comment about the account status.",
        examples=[""],
        title="Comment",
    )
    usercreationreason: Optional[str] = Field(
        None,
        description="Paragraph describing the usage of EcoTaxa made by the user.",
        examples=["Analysis of size and shapes of plastic particles"],
        title="User creation reason",
    )
    mail_status: Optional[bool] = Field(
        None,
        description="True for verified, False for waiting for verification, None for no action.",
        examples=[True],
        title="Mail status",
    )
    mail_status_date: Optional[datetime] = Field(
        None,
        description="Timestamp mail status modification date",
        examples=["2020-11-05T12:31:48.299713"],
        title="Mail status date",
    )
    organisation: str = Field(
        ...,
        description="User's organisation name, as text.",
        examples=["Oceanographic Laboratory of Villefranche sur Mer - LOV"],
        title="Organisation",
    )
    can_do: Optional[List[int]] = Field(
        [],
        description="List of User's allowed actions : 1 create a project, 2 administrate the app, 3 administrate users, 4 create taxon.",
        examples=[[1, 4]],
        title="User's permissions",
    )
    last_used_projects: Optional[List[ProjectSummaryModel]] = Field(
        [],
        description="List of User's last used projects.",
        examples=[
            [
                {"projid": 3, "title": "Zooscan point B"},
                {"projid": 1, "title": "Zooscan Tara Med"},
            ]
        ],
        title="Last used projects",
    )


class ValidationError(BaseModel):
    loc: List[str] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class BodyExportObjectSetBackupObjectSetExportBackupPost(BaseModel):
    filters: ProjectFilters
    request: BackupExportReq


class BodyExportObjectSetGeneralObjectSetExportGeneralPost(BaseModel):
    filters: ProjectFilters
    request: GeneralExportReq


class BodyPredictObjectSetObjectSetPredictPost(BaseModel):
    filters: ProjectFilters
    request: PredictionReq


class BulkUpdateReq(BaseModel):
    target_ids: List[int] = Field(
        ...,
        description="The IDs of the target entities.",
        examples=[[1, 5, 290]],
        title="Target Id",
    )
    updates: List[ColUpdate] = Field(
        ...,
        description="The list of updates, to do on all impacted entities. \n\n     { \n\n         ucol : A column name, pseudo-columns AKA free ones, are OK. \n\n         uval : The new value to set, always as a string \n\n     }",
        examples=[[{"ucol": "sub_part", "uval": "2"}]],
        title="Updates",
    )


class CollectionAggregatedRsp(BaseModel):
    can_be_administered: Optional[bool] = Field(
        False,
        description="Whether the current user is manager of all collection projects",
        title="Can be administered",
    )
    instrument: Optional[str] = Field(
        "?",
        description="The collection instrument from projects.",
        examples=["UVP5"],
        title="Instrument",
    )
    access: Optional[AccessLevelEnum] = Field(
        "2",
        description='The restricted access for collection projects.PUBLIC: "1", OPEN: "2", PRIVATE: "0"',
        examples=["2"],
        title="Access",
    )
    initclassiflist: str = Field(
        ...,
        description=" Aggregated categories from the collection projects.",
        title="Initial categories",
    )
    classiffieldlist: str = Field(
        ...,
        description=" Aggregated sorting and displaying fields from the collection projects.",
        title="Sorting fields",
    )
    cnn_network_id: str = Field(
        ...,
        description=" Common deep features for the collection projects. Can be None (???)",
        title="Deep Features",
    )
    status: str = Field(
        ...,
        description=" the restricted collection status calculated from projects.",
        title="Status",
    )
    creator_users: Optional[List[MinUserModel]] = Field(
        [], description="Annotators extracted from history.", title="Creator users"
    )
    privileges: Optional[Dict[str, List[MinUserModel]]] = Field(
        {"managers": [], "annotators": [], "viewers": []},
        description="Aggregated user privileges of projects with user minimal right on projects",
        examples=[{"managers": [], "annotators": [], "viewers": []}],
        title="privileges",
    )
    freecols: Optional[Dict[str, Dict[str, str]]] = Field(
        {},
        description="Common free cols of projects.",
        examples=[
            {
                "mappingobj": {"n01": "annotation_confidencepmax"},
                "mappingsample": {"t01": "cruise", "t02": "vessel", "t03": "barcode"},
                "mappingprocess": {},
                "mappingacq": {},
            }
        ],
        title="freecols",
    )
    excluded: Optional[Dict[str, List[int]]] = Field(
        {},
        description="Excluded projects for common values ",
        examples=[{"status": [1, 5, 12], "access": [1]}],
        title="excluded",
    )


class CollectionModel(BaseModel):
    id: int = Field(..., description="The collection Id.", examples=[1], title="Id")
    external_id: str = Field(
        ..., description="The external Id.", examples=[""], title="External Id"
    )
    external_id_system: str = Field(
        ...,
        description="The external Id system.",
        examples=[""],
        title="External id system",
    )
    title: str = Field(
        ...,
        description="The collection title.",
        examples=["My collection"],
        title="Title",
    )
    short_title: Optional[str] = Field(
        None,
        description="The collection short title.",
        examples=["My coll"],
        title="Short title",
    )
    citation: Optional[str] = Field(
        None, description="The collection citation.", examples=[""], title="Citation"
    )
    license: Optional[str] = Field(
        None,
        description="The collection license.",
        examples=["CC BY 4.0"],
        title="License",
    )
    abstract: Optional[str] = Field(
        None, description="The collection abstract.", examples=[""], title="Abstract"
    )
    description: Optional[str] = Field(
        None,
        description="The collection description.",
        examples=[""],
        title="Description",
    )
    project_ids: List[int] = Field(
        ...,
        description="The list of composing project IDs.",
        examples=[[1]],
        min_length=1,
        title="Project ids",
    )
    provider_user: Optional[MinUserModel] = Field(
        None,
        description="Is the person who\n        is responsible for the content of this metadata record. Writer of the title and abstract.",
        title="Provider user",
    )
    contact_user: Optional[MinUserModel] = Field(
        None,
        description="Is the person who\n        should be contacted in cases of questions regarding the content of the dataset or any data restrictions.\n        This is also the person who is most likely to stay involved in the dataset the longest.",
        title="Contact user",
    )
    creator_users: Optional[List[MinUserModel]] = Field(
        [],
        description="All people who\n        are responsible for the creation of the collection. Data creators should receive credit\n        for their work and should therefore be included in the citation.",
        title="Creator users",
    )
    creator_organisations: Optional[List[OrganizationModel]] = Field(
        [],
        description="All\n        organisations who are responsible for the creation of the collection. Data creators should\n        receive credit for their work and should therefore be included in the citation.",
        title="Creator organisations",
    )
    associate_users: Optional[List[MinUserModel]] = Field(
        [],
        description="Other person(s)\n        associated with the collection.",
        title="Associate users",
    )
    associate_organisations: Optional[List[OrganizationModel]] = Field(
        [],
        description="Other\n        organisation(s) associated with the collection.",
        title="Associate organisations",
    )


class CollectionReq(BaseModel):
    external_id: Optional[str] = Field(
        None, description="The external Id.", examples=[""], title="External Id"
    )
    title: Optional[str] = Field(
        None,
        description="The collection title.",
        examples=["My collection"],
        title="Title",
    )
    short_title: Optional[str] = Field(
        None,
        description="The collection short title.",
        examples=["My coll"],
        title="Short title",
    )
    provider_user: Optional[Union[int, Any]] = Field(
        None,
        description="Id of the person who\n        is responsible for the content of this metadata record. Writer of the title and abstract.",
        title="Provider user Id",
    )
    contact_user: Optional[Union[int, Any]] = Field(
        None,
        description="Id of the person who\n        should be contacted in cases of questions regarding the content of the dataset or any data restrictions.\n        This is also the person who is most likely to stay involved in the dataset the longest.",
        title="Contact user Id",
    )
    project_ids: Optional[List[int]] = Field(
        None,
        description="The list of composing project IDs.",
        examples=[[1]],
        min_length=1,
        title="Project ids",
    )
    license: Optional[LicenseEnum] = Field(
        None,
        description="The collection license.",
        examples=["CC BY 4.0"],
        title="License",
    )
    citation: Optional[str] = Field(
        None, description="The collection citation.", examples=[""], title="Citation"
    )
    abstract: Optional[str] = Field(
        None, description="The collection abstract.", examples=[""], title="Abstract"
    )
    description: Optional[str] = Field(
        None,
        description="The collection description.",
        examples=[""],
        title="Description",
    )
    creator_users: Optional[List[Union[int, Any]]] = Field(
        None,
        description="List of users id's or dict with name, organization for external persons.",
        title="Creator users Ids",
    )
    associate_users: Optional[List[Union[int, Any]]] = Field(
        None,
        description="List of users id's or dict with name, organization for external persons.",
        title="Associate users",
    )
    creator_organisations: Optional[List[Union[int, Any]]] = Field(
        None,
        description="All\n        organisations who are responsible for the creation of the collection. Data creators should\n        receive credit for their work and should therefore be included in the citation.",
        title="Creator organisations Ids or names",
    )
    associate_organisations: Optional[List[Union[int, Any]]] = Field(
        None,
        description="Other\n        organisation(s) Ids or names associated with the collection.",
        title="Associate organisations",
    )


class DarwinCoreExportReq(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    collection_id: int = Field(
        ...,
        description="The collection to export, by its internal Id.",
        examples=[1],
        title="Collection Id",
    )
    dry_run: Optional[bool] = Field(
        False,
        description="If set, then only a diagnostic of doability will be done.",
        examples=[False],
        title="Dry run",
    )
    include_predicted: Optional[bool] = Field(
        False,
        description="If set, then predicted objects, as well as validated ones, will be exported. A validation status will allow to distinguish between the two possible statuses.",
        examples=[False],
        title="Include predicted",
    )
    with_absent: Optional[bool] = Field(
        False,
        description="If set, then *absent* records will be generated, in the relevant samples, for categories present in other samples.",
        examples=[False],
        title="With absent",
    )
    with_computations: Optional[List[SciExportTypeEnum]] = Field(
        [],
        description="Compute organisms abundances (ABO), concentrations (CNC) or biovolumes (BIV). Several possible.",
        examples=[["ABO"]],
        title="With computations",
    )
    computations_pre_mapping: Optional[Dict[str, int]] = Field(
        {},
        description="Mapping from present taxon (key) to output replacement one (value), during computations. Use a 0 replacement to _discard_ the objects with present taxon. Note: These are EcoTaxa categories, WoRMS mapping happens after, whatever.",
        examples=[{"456": 956, "2456": 213, "93672": 0}],
        title="Computation mapping",
    )
    formulae: Optional[Dict[str, str]] = Field(
        {},
        description="Transitory: How to get values from DB free columns. Python syntax, prefixes are 'sam', 'ssm' and 'obj'. Variables used in computations are 'total_water_volume', 'subsample_coef' and 'individual_volume'",
        examples=[
            {
                "subsample_coef": "1/ssm.sub_part",
                "total_water_volume": "sam.tot_vol/1000",
                "individual_volume": "4.0/3.0*math.pi*(math.sqrt(obj.area/math.pi)*ssm.pixel_size)**3",
            }
        ],
        title="Computation formulas",
    )
    extra_xml: Optional[List[str]] = Field(
        [],
        description="XML blocks which will be output, reformatted, inside the <dataset> tag of produced EML. Formal schema is in dataset section of: https://eml.ecoinformatics.org/schema/eml_xsd ",
        examples=[
            [
                "<associatedParty>\n    <individualName><givenName>Coco</givenName><surName>Rico</surName>\n    </individualName>\n    <organizationName>CHICK</organizationName>\n      </associatedParty>"
            ]
        ],
        title="Extra XML",
    )


class ExportReq(BaseModel):
    collection_id: Optional[int] = Field(
        None,
        description="The Collection to export if requested.",
        examples=[1],
        title="Collection Id",
    )
    project_id: Union[int, str] = Field(
        ...,
        description="The project(int) or projects (str, project ids list) to export.",
        examples=[1],
        title="Project Id",
    )
    exp_type: ExportTypeEnum = Field(
        ..., description="The export type.", examples=["TSV"], title="Export type"
    )
    use_latin1: Optional[bool] = Field(
        False,
        description="Export using latin 1 character set, AKA iso-8859-1. Default is utf-8.",
        examples=[False],
        title="Use latin1",
    )
    tsv_entities: Optional[str] = Field(
        "",
        description="For 'TSV' type, the entities to export, one letter for each of O(bject), P(rocess), A(cquisition), S(ample), C(omments).",
        examples=["OPAS"],
        title="Tsv entities",
    )
    only_annotations: Optional[bool] = Field(
        False,
        description="For 'BAK' type, only save objects' last annotation data in backup.",
        examples=[False],
        title="Backup annotations",
    )
    split_by: Optional[str] = Field(
        "",
        description="For 'TSV' type, inside archives, split in one directory per... 'sample', 'acquisition', 'taxon' or '' (no split).",
        examples=["sample"],
        title="Split by",
    )
    coma_as_separator: Optional[bool] = Field(
        False,
        description="For 'TSV' type, use a , instead of . for decimal separator.",
        examples=[False],
        title="Coma as separator",
    )
    format_dates_times: Optional[bool] = Field(
        True,
        description="For 'TSV' type, format dates and times using - and : respectively.",
        examples=[False],
        title="Format dates times",
    )
    with_images: Optional[bool] = Field(
        False,
        description="For 'BAK' and 'DOI' types, export images as well.",
        examples=[False],
        title="With images",
    )
    with_internal_ids: Optional[bool] = Field(
        False,
        description="For 'TSV' type, export internal DB IDs.",
        examples=[False],
        title="With internal ids",
    )
    with_types_row: Optional[bool] = Field(
        False,
        description="Add an EcoTaxa-compatible second line with types.",
        examples=[False],
        title="With types row",
    )
    only_first_image: Optional[bool] = Field(
        False,
        description="For 'DOI' type, export only first (displayed) image.",
        examples=[False],
        title="Only first image",
    )
    sum_subtotal: Optional[SummaryExportGroupingEnum] = Field(
        "",
        description="For 'SUM', 'ABO', 'CNC' and 'BIV' types, if computations should be combined. Per A(cquisition) or S(ample) or <Empty>(just taxa).",
        examples=["A"],
        title="Sum subtotal",
    )
    pre_mapping: Optional[Dict[str, int]] = Field(
        {},
        description="For 'ABO', 'CNC' and 'BIV' types types, mapping from present taxon (key) to output replacement one (value). Use a null replacement to _discard_ the present taxon.",
        examples=[{"456": 956, "2456": 213}],
        title="Categories mapping",
    )
    formulae: Optional[Dict[str, str]] = Field(
        {},
        description="Transitory: For 'CNC' and 'BIV' type, how to get values from DB free columns. Python syntax, prefixes are 'sam', 'ssm' and 'obj'.Variables used in computations are 'total_water_volume', 'subsample_coef' and 'individual_volume'",
        examples=[
            {
                "subsample_coef": "1/ssm.sub_part",
                "total_water_volume": "sam.tot_vol/1000",
                "individual_volume": "4.0/3.0*math.pi*(math.sqrt(obj.area/math.pi)*ssm.pixel_size)**3",
            }
        ],
        title="Computation formulas",
    )
    out_to_ftp: Optional[bool] = Field(
        False,
        description="Copy result file to FTP area. Original file is still available.",
        examples=[False],
        title="Out to ftp",
    )


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")


class ProjectUserStatsModel(BaseModel):
    projid: Optional[int] = Field(
        None, description="The project id.", title="Project id"
    )
    annotators: Optional[List[MinimalUserBO]] = Field(
        None,
        description="The users who ever decided on classification or state of objects.",
        title="Annotators",
    )
    activities: Optional[List[UserActivity]] = Field(
        None, description="More details on annotators' activities.", title="Activities"
    )


class SummaryExportReq(BaseModel):
    collection_id: Optional[int] = Field(
        None,
        description="The Collection to export if requested.",
        examples=[1],
        title="Collection Id",
    )
    project_id: Union[int, str] = Field(
        ...,
        description="The project(int) or projects (str, project ids list) to export.",
        examples=[1],
        title="Project Id",
    )
    quantity: Optional[SummaryExportQuantitiesOptionsEnum] = Field(
        "abundance",
        description="The quantity to compute. Abundance is always possible.",
        examples=["abundance"],
        title="Quantity",
    )
    summarise_by: Optional[SummaryExportSumOptionsEnum] = Field(
        "sample",
        description="Computations aggregation level.",
        examples=["acquisition"],
        title="Summarise by",
    )
    taxo_mapping: Optional[Dict[str, int]] = Field(
        {},
        description="Mapping from present taxon (key) to output replacement one (value). Use a 0 replacement to _discard_ the present taxon.",
        examples=[{"456": 956, "2456": 213, "7153": 0}],
        title="Categories mapping",
    )
    formulae: Optional[Dict[str, str]] = Field(
        {},
        description="Transitory: How to get values from DB free columns. Python syntax, prefixes are 'sam', 'ssm' and 'obj'.Variables used in computations are 'total_water_volume', 'subsample_coef' and 'individual_volume'",
        examples=[
            {
                "subsample_coef": "1/ssm.sub_part",
                "total_water_volume": "sam.tot_vol/1000",
                "individual_volume": "4.0/3.0*math.pi*(math.sqrt(obj.area/math.pi)*ssm.pixel_size)**3",
            }
        ],
        title="Computation formulas",
    )
    out_to_ftp: Optional[bool] = Field(
        False,
        description="Copy result file to FTP area. Original file is still available.",
        examples=[False],
        title="Out to ftp",
    )


class BodyExportObjectSetObjectSetExportPost(BaseModel):
    filters: ProjectFilters
    request: ExportReq = Field(..., title="Request")


class BodyExportObjectSetSummaryObjectSetExportSummaryPost(BaseModel):
    filters: ProjectFilters
    request: SummaryExportReq
